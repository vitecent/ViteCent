/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * **********************************
 */

#region

using MediatR;
using Microsoft.Extensions.Logging;
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};
using ViteCent.Core.Data;
using ViteCent.Core.Orm.SqlSugar;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Domain.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}
/// </summary>
/// <param name="logger"></param>
public class $!{Setting.AddName}$!{Table.CamelCaseName}(
    ILogger<$!{Setting.AddName}$!{Table.CamelCaseName}> logger)
    : BaseDomain<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}>, IRequestHandler<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}, BaseResult>
{
    /// <summary>
    /// 数据库名称
    /// </summary>
    public override string DataBaseName => "$!{DataBase.Name}";

    /// <summary>
    /// 新增$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.Name} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Domain.Name}.$!{Table.CamelCaseName}.$!{Setting.AddName}$!{Table.CamelCaseName}");

        return await base.AddAsync(request);
    }
}