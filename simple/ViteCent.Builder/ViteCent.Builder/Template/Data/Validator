/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region

using FluentValidation;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

/// <summary>
/// $!{Table.Description}验证器
/// </summary>
[Serializable]
public partial class $!{Table.CamelCaseName}$!{Setting.Data.ValidatorSuffix} : AbstractValidator<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}>
{
    /// <summary>
    /// 验证参数
    /// </summary>
    /// <param name="validate"></param>
    public $!{Table.CamelCaseName}$!{Setting.Data.ValidatorSuffix}(bool validate = false)
    {
        RuleFor(x => x).NotNull().WithMessage("参数不能为空");
#foreach($Field in $ValidatorFields)
#if($Field.DataType == "string" || $Field.DataType == "string?" || $Field.DataType == "Guid" || $Field.DataType == "Guid?")
        RuleFor(x => x.$!{Field.CamelCaseName}).NotNull().NotEmpty().WithMessage("$!{Field.Description}不能为空");
#elseif ($Field.DataType == "DateTime" || $Field.DataType == "DateTime?")
        RuleFor(x => x.$!{Field.CamelCaseName}).Must(x => x > DateTime.MinValue && x < DateTime.MaxValue).WithMessage("$!{Field.Description}不能为空");
#else
        RuleFor(x => x.$!{Field.CamelCaseName}).GreaterThan(0).WithMessage("$!{Field.Description}不能为空");
#end
#end

        OverrideValidator(validate);
    }
}