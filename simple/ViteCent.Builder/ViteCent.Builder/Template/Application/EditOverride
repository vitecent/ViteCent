/*
 * **********************************
 * 代码由工具自动生成
 * 重新生成时，不会覆盖原有代码
 * **********************************
 */

#region 引入命名空间
#if($HasCompanyId)

// 引入$!{Table.Description}相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseCompany;
#end
#if($HasDepartmentId)

// 引入部门信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseDepartment;
#end
#if($HasOperationId)

// 引入操作信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseOperation;
#end
#if($HasPositionId)

// 引入职位信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BasePosition;
#end
#if($HasResourceId)

// 引入资源信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseResource;
#end
#if($HasRoleId)

// 引入角色信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseRole;
#end
#if($HasUserId)

// 引入用户信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseUser;
#end
#if($HasSystemId)

// 引入核心信息相关的模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseSystem;
#end

// 引入$!{Table.Description}相关的数据结构
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

// 引入$!{Table.Description}相关的数据模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};

// 引入核心数据类型
using ViteCent.Core.Data;

#endregion 引入命名空间

namespace $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 删除$!{Table.Description}应用拓展
/// </summary>
public partial class $!{Setting.EditName}$!{Table.CamelCaseName}
{
    /// <summary>
    /// 验证$!{Table.Description}
    /// </summary>
    /// <param name="entity"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task<BaseResult> OverrideHandle($!{Table.CamelCaseName}$!{Setting.Entity.Name} entity,
        CancellationToken cancellationToken)
    {
        return await Task.FromResult(new BaseResult());
    }

    /// <summary>
    /// 验证参数
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task<BaseResult> OverrideHandle($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request,
        CancellationToken cancellationToken)
    {
        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (string.IsNullOrWhiteSpace(request.CompanyId))
            request.CompanyId = companyId;

        var hasCompany = await mediator.CheckCompany(request.CompanyId);

        if (hasCompany.Success)
            return hasCompany;

        request.CompanyName = hasCompany?.Data?.Name;

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (string.IsNullOrWhiteSpace(request.DepartmentId))
            request.DepartmentId = departmentId;

        var hasDepartment = await mediator.CheckDepartment(request.CompanyId, request.DepartmentId);

        if (hasDepartment.Success)
            return hasDepartment;

        request.DepartmentName = hasDepartment?.Data?.Name;

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (string.IsNullOrWhiteSpace(request.PositionId))
            request.PositionId = positionId;

        var hasPosition = await mediator.CheckPosition(request.CompanyId, request.PositionId);

        if (hasPosition.Success)
            return hasPosition;

        request.PositionName = hasPosition?.Data?.Name;

#end
#if($HasUserId)
        var hasUser = await mediator.CheckUser(request.CompanyId, request.DepartmentId, request.UserId);

        if (hasUser.Success)
            return hasUser;

        request.UserName = hasUser?.Data?.RealName;

#end
#if($HasRoleId)
        var hasRole = await mediator.CheckRole(request.CompanyId, request.RoleId);

        if (hasRole.Success)
            return hasRole;

        request.RoleName = hasRole?.Data?.Name;

#end
#if($HasSystemId)
        var hasSystem = await mediator.CheckSystem(request.CompanyId, request.SystemId);

        if (hasSystem.Success)
            return hasSystem;

        request.SystemName = hasSystem?.Data?.Name;

#end
#if($HasResourceId)
        var hasResource = await mediator.CheckResource(request.CompanyId, request.SystemId, request.ResourceId);

        if (hasResource.Success)
            return hasResource;

        request.ResourceName = hasResource?.Data?.Name;

#end
#if($HasOperationId)
        var hasOperation = await mediator.CheckOperation(request.CompanyId, request.SystemId, request.ResourceId, request.OperationId);

        if (hasOperation.Success)
            return hasOperation;

        request.OperationName = hasOperation?.Data?.Name;

#end
        var hasArgs = new $!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}
        {
#if($HasId)
            Id = request.Id,
#end
#if($HasCompanyId)
            CompanyId = request.CompanyId,
#end
#if($HasDepartmentId)
            DepartmentId = request.DepartmentId,
#end
#if($HasRoleId)
            RoleId = request.RoleId,
#end
#if($HasUserId)
            UserId = request.UserId,
#end
#if($HasSystemId)
            SystemId = request.SystemId,
#end
#if($HasResourceId)
            ResourceId = request.ResourceId,
#end
#if($HasOperationId)
            OperationId = request.OperationId,
#end
        };

        return await mediator.Send(hasArgs, cancellationToken);
    }
}