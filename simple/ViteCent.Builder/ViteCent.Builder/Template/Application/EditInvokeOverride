/*
 * **********************************
 * 代码由工具自动生成
 * 重新生成时，不会覆盖原有代码
 * **********************************
 */

#region

#if($HasCompanyId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseCompany;
#end
#if($HasDepartmentId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseDepartment;
#end
#if($HasPositionId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BasePosition;
#end
#if($HasUserId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseUser;
#end
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};
using ViteCent.Core.Data;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 删除$!{Table.Description}应用拓展
/// </summary>
public partial class $!{Setting.EditName}$!{Table.CamelCaseName}
{
    /// <summary>
    /// 验证$!{Table.Description}
    /// </summary>
    /// <param name="entity"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task<BaseResult> OverrideHandle($!{Table.CamelCaseName}$!{Setting.Entity.Name} entity,
        CancellationToken cancellationToken)
    {
        return await Task.FromResult(new BaseResult());




    }

    /// <summary>
    /// 验证参数
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task<BaseResult> OverrideHandle($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request,
        CancellationToken cancellationToken)
    {
        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (string.IsNullOrWhiteSpace(request.CompanyId))
            request.CompanyId = companyId;

        var hasCompany = await companyInvoke.CheckCompany(request.CompanyId, user?.Token ?? string.Empty);

        if (hasCompany.Success)
            return hasCompany;



 request.CompanyName = hasCompany?.Data?.Name;

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (string.IsNullOrWhiteSpace(request.DepartmentId))
            request.DepartmentId = departmentId;

        var hasDepartment = await departmentInvoke.CheckDepartment(request.CompanyId, request.DepartmentId, user?.Token ?? string.Empty);

        if (hasDepartment.Success)
            return hasDepartment;



 request.DepartmentName = hasDepartment?.Data?.Name;

#end
#if($HasUserId)
        var hasUser = await userInvoke.CheckUser(request.CompanyId, request.DepartmentId, request.UserId, user?.Token ?? string.Empty);

        if (hasUser.Success)
            return hasUser;



 request.UserName = hasUser?.Data?.RealName;

#end
        var hasArgs = new $!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}
        {
#if($HasId)
            Id = request.Id,
#end
#if($HasCompanyId)
            CompanyId = request.CompanyId,
#end
#if($HasDepartmentId)
            DepartmentId = request.DepartmentId,
#end
#if($HasUserId)
            UserId = request.UserId,
#end
        };

        return await mediator.Send(hasArgs, cancellationToken);




    }
}