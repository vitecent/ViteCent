#region

using AutoMapper;
using MediatR;
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
using Microsoft.AspNetCore.Http;
#end
using Microsoft.Extensions.Logging;
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
using System.Security.Claims;
#end
using $!{DataBase.Name}.$!{Setting.Data.DataName}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.$!{Table.CamelCaseName};
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
using ViteCent.Core;
#end
using ViteCent.Core.Data;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName};

/// <summary>
/// 获取$!{Table.Description}仓储
/// </summary>
/// <param name="logger"></param>
/// <param name="mapper"></param>
/// <param name="mediator"></param>
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
/// <param name="httpContextAccessor"></param>
public class $!{Setting.GetName}$!{Table.CamelCaseName}(ILogger<$!{Setting.GetName}$!{Table.CamelCaseName}> logger, IMapper mapper, IMediator mediator, IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix}, DataResult<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>>
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = new();

#else
public class $!{Setting.GetName}$!{Table.CamelCaseName}(ILogger<$!{Setting.GetName}$!{Table.CamelCaseName}> logger, IMapper mapper, IMediator mediator) : IRequestHandler<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix}, DataResult<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>>
{
#end
    /// <summary>
    /// 获取$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<DataResult<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>> Handle($!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName}.$!{Setting.GetName}$!{Table.CamelCaseName}");

#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
        InitUser(httpContextAccessor);

#end
#if($HasCompanyId)
        var companyId = user?.Company?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(companyId))
            request.CompanyId = companyId;

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(departmentId))
            request.DepartmentId = departmentId;

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(positionId))
            request.PositionId = positionId;

#end
        var args = mapper.Map<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}>(request);

        var entity = await mediator.Send(args, cancellationToken);

        if (entity == null)
            return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>(500, "数据不存在或无权限");

        var dto = mapper.Map<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>(entity);

        return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.DataResultSuffix}>(dto);
    }
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)

    /// <summary>
    /// 获取$!{Table.Description}用户信息
    /// </summary>
    /// <param name="httpContextAccessor"></param>
    private void InitUser(IHttpContextAccessor httpContextAccessor)
    {
        var context = httpContextAccessor.HttpContext;

        var json = context?.User.FindFirstValue(ClaimTypes.UserData);

        if (!string.IsNullOrWhiteSpace(json))
            user = json.DeJson<BaseUserInfo>();
    }
#end
}