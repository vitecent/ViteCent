#region

using $!{DataBase.Name}.$!{Setting.Data.DataName}.$!{Table.CamelCaseName};
using ViteCent.Core;
using ViteCent.Core.Data;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}仓储拓展
/// </summary>
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}
{
    /// <summary>
    /// 验证参数
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task<BaseResult> OverrideHandle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix} request, CancellationToken cancellationToken)
    {
        var hasArgs = new $!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
        {
#if($HasCompanyId)
            CompanyId = request.CompanyId,
#end
#if($HasDepartmentId)
            DepartmentId = request.DepartmentId,
#end
#if($HasPositionId)
            PositionId = request.PositionId,
#end
#if($HasRoleId)
            RoleId = request.RoleId,
#end
#if($HasUserId)
            UserId = request.UserId,
#end
#if($HasSystemId)
            SystemId = request.SystemId,
#end
#if($HasResourceId)
            ResourceId = request.ResourceId,
#end
#if($HasOperationId)
            OperationId = request.OperationId,
#end
        };

        return await mediator.Send(hasArgs, cancellationToken);
    }
}