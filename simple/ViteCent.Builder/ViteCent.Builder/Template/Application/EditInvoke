/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region

using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
#if($HasCompanyId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseCompany;
#end
#if($HasDepartmentId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseDepartment;
#end
#if($HasPositionId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BasePosition;
#end
#if($HasUserId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.Name}.BaseUser;
#end
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};
using ViteCent.Core.Data;
using ViteCent.Core.Web;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 编辑$!{Table.Description}仓储
/// </summary>
/// <param name="logger"></param>
/// <param name="mapper"></param>
/// <param name="mediator"></param>
#if($HasCompanyId)
/// <param name="companyInvoke"></param>
#end
#if($HasDepartmentId)
/// <param name="departmentInvoke"></param>
#end
#if($HasPositionId)
/// <param name="positionInvoke"></param>
#end
#if($HasUserId)
/// <param name="userInvoke"></param>
#end
/// <param name="httpContextAccessor"></param>
public partial class $!{Setting.EditName}$!{Table.CamelCaseName}(ILogger<$!{Setting.EditName}$!{Table.CamelCaseName}> logger,
    IMapper mapper,
    IMediator mediator,
#if($HasCompanyId)
    IBaseInvoke<$!{Setting.GetName}BaseCompany$!{Setting.Data.ArgsSuffix}, DataResult<BaseCompany$!{Setting.Data.ResultSuffix}>> companyInvoke,
#end
#if($HasDepartmentId)
    IBaseInvoke<$!{Setting.GetName}BaseDepartment$!{Setting.Data.ArgsSuffix}, DataResult<BaseDepartment$!{Setting.Data.ResultSuffix}>> departmentInvoke,
#end
#if($HasOperationId)
    IBaseInvoke<$!{Setting.GetName}BaseOperation$!{Setting.Data.ArgsSuffix}, DataResult<BaseOperation$!{Setting.Data.ResultSuffix}>> operationInvoke,
#end
#if($HasPositionId)
    IBaseInvoke<$!{Setting.GetName}BasePosition$!{Setting.Data.ArgsSuffix}, DataResult<BasePosition$!{Setting.Data.ResultSuffix}>> positionInvoke,
#end
#if($HasUserId)
    IBaseInvoke<$!{Setting.GetName}BaseUser$!{Setting.Data.ArgsSuffix}, DataResult<BaseUser$!{Setting.Data.ResultSuffix}>> userInvoke,
#end
#if($HasSystemId)
    IBaseInvoke<$!{Setting.GetName}BaseSystemy$!{Setting.Data.ArgsSuffix}, DataResult<BaseSystem$!{Setting.Data.ResultSuffix}>> systemInvoke,
#end
    IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = new();

    /// <summary>
    /// 编辑$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName}.$!{Setting.EditName}$!{Table.CamelCaseName}");

        user = httpContextAccessor.InitUser();

        var check = await OverrideHandle(request, cancellationToken);

        if (!check.Success)
            return check;

        var args = mapper.Map<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}>(request);

        var entity = await mediator.Send(args, cancellationToken);

        if (entity == null)
            return new BaseResult(500, "$!{Table.Description}不存在");

        var result = await OverrideHandle(entity, cancellationToken);

        if (!result.Success)
            return result;

#foreach($Field in $EditFields)
        entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName};
#end
        entity.Updater = user?.Name ?? string.Empty;
        entity.UpdateTime = DateTime.Now;
        entity.DataVersion = DateTime.Now;

        return await mediator.Send(entity, cancellationToken);
    }
}