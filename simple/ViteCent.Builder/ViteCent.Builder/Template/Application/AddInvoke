/*
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 */

#region

using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
#if($HasCompanyId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseCompany;
#end
#if($HasDepartmentId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseDepartment;
#end
#if($HasPositionId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BasePosition;
#end
#if($HasOperationId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseOperation;
#end
#if($HasResourceId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseResource;
#end
#if($HasRoleId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseRole;
#end
#if($HasUserId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseUser;
#end
#if($HasSystemId)
using $!{DataBase.InvokeProjrect}.$!{Setting.Data.DataName}.BaseSystem;
#end
using $!{DataBase.Name}.$!{Setting.Data.DataName}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.$!{Table.CamelCaseName};
using ViteCent.Core;
#if($HasId)
using ViteCent.Core.Cache;
#end
using ViteCent.Core.Data;
using ViteCent.Core.Enums;
using ViteCent.Core.Web;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}仓储
/// </summary>
/// <param name="logger"></param>
#if($HasId)
/// <param name="cache"></param>
#end
/// <param name="mapper"></param>
/// <param name="mediator"></param>
#if($HasCompanyId)
/// <param name="companyInvoke"></param>
#end
#if($HasDepartmentId)
   /// <param name="departmentInvoke"></param>
#end
#if($HasPositionId)
/// <param name="positionInvoke"></param>
#end
#if($HasOperationId)
/// <param name="operationInvoke"></param>
#end
#if($HasResourceId)
/// <param name="resourceInvoke"></param>
#end
#if($HasRoleId)
/// <param name="roleInvoke"></param>
#end
#if($HasUserId)
/// <param name="userInvoke"></param>
#end
#if($HasSystemId)
/// <param name="systemInvoke"></param>
#end
/// <param name="httpContextAccessor"></param>
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}(ILogger<$!{Setting.AddName}$!{Table.CamelCaseName}> logger,
#if($HasId)
    IBaseCache cache,
#end
    IMapper mapper,
    IMediator mediator,
#if($HasCompanyId)
    IBaseInvoke<$!{Setting.GetName}BaseCompany$!{Setting.Data.DataArgsSuffix}, DataResult<BaseCompany$!{Setting.Data.DataResultSuffix}>> companyInvoke,
#end
#if($HasDepartmentId)
    IBaseInvoke<$!{Setting.GetName}BaseDepartment$!{Setting.Data.DataArgsSuffix}, DataResult<BaseDepartment$!{Setting.Data.DataResultSuffix}>> departmentInvoke,
#end
#if($HasPositionId)
    IBaseInvoke<$!{Setting.GetName}BasePosition$!{Setting.Data.DataArgsSuffix}, DataResult<BasePosition$!{Setting.Data.DataResultSuffix}>> positionInvoke,
#end
#if($HasOperationId)
    IBaseInvoke<$!{Setting.GetName}BaseOperation$!{Setting.Data.DataArgsSuffix}, DataResult<BaseOperation$!{Setting.Data.DataResultSuffix}>> operationInvoke,
#end
#if($HasResourceId)
    IBaseInvoke<$!{Setting.GetName}BaseResource$!{Setting.Data.DataArgsSuffix}, DataResult<BaseResource$!{Setting.Data.DataResultSuffix}>> resourceInvoke,
#end
#if($HasRoleId)
    IBaseInvoke<$!{Setting.GetName}BaseRole$!{Setting.Data.DataArgsSuffix}, DataResult<BaseCompany$!{Setting.Data.DataResultSuffix}>> roleInvoke,
#end
#if($HasUserId)
    IBaseInvoke<$!{Setting.GetName}BaseUser$!{Setting.Data.DataArgsSuffix}, DataResult<BaseUser$!{Setting.Data.DataResultSuffix}>> userInvoke,
#end
#if($HasSystemId)
    IBaseInvoke<$!{Setting.GetName}BaseSystemy$!{Setting.Data.DataArgsSuffix}, DataResult<BaseSystem$!{Setting.Data.DataResultSuffix}>> systemInvoke,
#end
    IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 用户密钥
    /// </summary>
    private string token = string.Empty;

    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = new();

    /// <summary>
    /// 新增$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName}.$!{Setting.AddName}$!{Table.CamelCaseName}");

        InitUser(httpContextAccessor);

        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (!string.IsNullOrWhiteSpace(companyId))
            request.CompanyId = companyId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId))
        {
            var hasCompanyArgs = new $!{Setting.GetName}BaseCompany$!{Setting.Data.DataArgsSuffix}
            {
                Id = request.CompanyId,
            };

            var hasCompany = await companyInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseCompany/$!{Setting.GetName}", hasCompanyArgs, token);

            if (!hasCompany.Success)
                return hasCompany;

            if (hasCompany.Data == null)
                return new BaseResult(500, "公司不存在");

            if (hasCompany.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "公司已禁用");
        }

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(departmentId))
            request.DepartmentId = departmentId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.DepartmentId))
        {
            var hasDepartmentArgs = new $!{Setting.GetName}BaseDepartment$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.DepartmentId,
            };

            var hasDepartment = await departmentInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseDepartment/$!{Setting.GetName}", hasDepartmentArgs, token);

            if (!hasDepartment.Success)
                return hasDepartment;

            if (hasDepartment.Data == null)
                return new BaseResult(500, "部门不存在");

            if (hasDepartment.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "部门已禁用");
        }

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(positionId))
            request.PositionId = positionId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.PositionId))
        {
            var hasPositionArgs = new $!{Setting.GetName}BasePosition$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.PositionId,
            };

            var hasPosition = await positionInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BasePosition/$!{Setting.GetName}", hasPositionArgs, token);

            if (!hasPosition.Success)
                return hasPosition;

            if (hasPosition.Data == null)
                return new BaseResult(500, "职位不存在");

            if (hasPosition.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "职位已禁用");
        }

#end
#if($HasUserId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.DepartmentId) && !string.IsNullOrWhiteSpace(request.UserId))
        {
            var hasUserArgs = new $!{Setting.GetName}BaseUser$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                DepartmentId = request.DepartmentId,
                Id = request.UserId,
            };

            var hasUser = await userInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseUser/$!{Setting.GetName}", hasUserArgs, token);

            if (!hasUser.Success)
                return hasUser;

            if (hasUser.Data == null)
                return new BaseResult(500, "用户不存在");

            if (hasUser.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "用户已禁用");
        }

#end
#if($HasRoleId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.RoleId))
        {
            var hasRoleArgs = new $!{Setting.GetName}BaseRole$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.RoleId,
            };

            var hasRole = await roleInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseRole/$!{Setting.GetName}", hasRoleArgs, token);

            if (!hasRole.Success)
                return hasRole;

            if (hasRole.Data == null)
                return new BaseResult(500, "角色不存在");

            if (hasRole.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "角色已禁用");
        }

#end
#if($HasSystemId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId))
        {
            var hasSystemArgs = new $!{Setting.GetName}BaseSystem$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.SystemId,
            };

            var hasSystem = await systemInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseSystem/$!{Setting.GetName}", hasSystemArgs, token);

            if (!hasSystem.Success)
                return hasSystem;

            if (hasSystem.Data == null)
                return new BaseResult(500, "系统不存在");

            if (hasSystem.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "系统已禁用");
        }

#end
#if($HasResourceId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId) && !string.IsNullOrWhiteSpace(request.ResourceId))
        {
            var hasResourceArgs = new $!{Setting.GetName}BaseResource$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                SystemId = request.SystemId,
                Id = request.ResourceId,
            };

            var hasResource = await resourceInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseResource/$!{Setting.GetName}", hasResourceArgs, token);

            if (!hasResource.Success)
                return hasResource;

            if (hasResource.Data == null)
                return new BaseResult(500, "资源不存在");

            if (hasResource.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "资源已禁用");
        }

#end
#if($HasOperationId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId) && !string.IsNullOrWhiteSpace(request.ResourceId) && !string.IsNullOrWhiteSpace(request.OperationId))
        {
            var hasOperationArgs = new $!{Setting.GetName}BaseOperation$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                SystemId = request.SystemId,
                ResourceId = request.ResourceId,
                Id = request.OperationId,
            };

            var hasOperation = await operationInvoke.InvokePostAsync("$!{DataBase.InvokeService}", "/BaseOperation/$!{Setting.GetName}", hasOperationArgs, token);

            if (!hasOperation.Success)
                return hasOperation;

            if (hasOperation.Data == null)
                return new BaseResult(500, "操作不存在");

            if (hasOperation.Data.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "操作已禁用");
        }

#end
        var result = await OverrideHandle(request, cancellationToken);

        if (!result.Success)
            return result;

        var entity = mapper.Map<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.EntityName}>(request);
#if($HasId)

        entity.Id = await cache.NextIdentity(new NextIdentifyArg()
        {
            CompanyId = companyId,
            Name = "$!{Table.CamelCaseName}",
        });
#end

        entity.Creator = user?.Name ?? string.Empty;
        entity.CreateTime = DateTime.Now;
        entity.DataVersion = DateTime.Now;

#if($HasId)
        var addResult = await mediator.Send(entity, cancellationToken);

        if (!addResult.Success)
            return addResult;

        return new BaseResult(entity.Id);
#else
        return await await mediator.Send(entity, cancellationToken);
#end
    }

    /// <summary>
    /// 获取$!{Table.Description}用户信息
    /// </summary>
    /// <param name="httpContextAccessor"></param>
    private void InitUser(IHttpContextAccessor httpContextAccessor)
    {
        var context = httpContextAccessor.HttpContext;

        token = context?.Request?.Headers[Const.Token].ToString() ?? string.Empty;

        var json = context?.User.FindFirstValue(ClaimTypes.UserData);

        if (!string.IsNullOrWhiteSpace(json))
            user = json.DeJson<BaseUserInfo>();
    }
}