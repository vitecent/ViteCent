/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region 引入命名空间

// 引入 AutoMapper 用于对象映射
using AutoMapper;

// 引入 MediatR 用于实现中介者模式
using MediatR;

// 引入 ASP.NET Core MVC 核心功能
using Microsoft.AspNetCore.Http;

// 引入 Microsoft.Extensions.Logging 用于日志记录
using Microsoft.Extensions.Logging;

// 引入$!{Table.Description}相关的数据参数
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

// 引入$!{Table.Description}相关的数据模型
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};

// 引入核心数据类型
using ViteCent.Core.Data;

// 引入核心枚举类型
using ViteCent.Core.Enums;

#endregion 引入命名空间

namespace $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 编辑$!{Table.Description}应用
/// </summary>
/// <param name="logger"></param>
/// <param name="mapper"></param>
/// <param name="mediator"></param>
/// <param name="httpContextAccessor"></param>
public partial class $!{Setting.EditName}$!{Table.CamelCaseName}(
    // 注入日志记录器
    ILogger<$!{Setting.EditName}$!{Table.CamelCaseName}> logger,
    // 注入映射器接口
    IMapper mapper,
    // 注入中介者接口
    IMediator mediator,
    // 注入HTTP上下文访问器
    IHttpContextAccessor httpContextAccessor)
    // 继承基类，指定查询参数和返回结果类型
    : IRequestHandler<$!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = httpContextAccessor.InitUser();

    /// <summary>
    /// 编辑$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request, CancellationToken cancellationToken)
    {
        // 记录方法调用日志，便于追踪和调试
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName}.$!{Setting.EditName}$!{Table.CamelCaseName}");

        var check = await OverrideHandle(request, cancellationToken);

        if (!check.Success)
            return check;

        var getArgs = mapper.Map<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}>(request);

        var entity = await mediator.Send(getArgs, cancellationToken);

        if (entity is null)
            return new BaseResult(500, "$!{Table.Description}不存在");

        check = await OverrideHandle(entity, cancellationToken);

        if (!check.Success)
            return check;

#foreach($Field in $EditFields)
#if($Field.Nullable)
#if($Field.DataType == "string?")
        if (request.$!{Field.CamelCaseName} is not null)
            entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName};
#else
        if (request.$!{Field.CamelCaseName}.HasValue)
            entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName}.Value;
#end
#else
        entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName};
#end

#end
        entity.Updater = user?.Name ?? string.Empty;
        entity.UpdateTime = DateTime.Now;
        entity.DataVersion = DateTime.Now;

        var result = await mediator.Send(entity, cancellationToken);

        await $!{Setting.AddName}$!{Table.CamelCaseName}.OverrideTopic(mediator, TopicEnum.Edit, entity, cancellationToken);

        return result;
    }
}