#region

using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
#if($HasCompanyId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseCompany;
#end
#if($HasDepartmentId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseDepartment;
#end
#if($HasOperationId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseOperation;
#end
#if($HasPositionId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BasePosition;
#end
#if($HasResourceId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseResource;
#end
#if($HasRoleId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseRole;
#end
#if($HasUserId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseUser;
#end
#if($HasSystemId)
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.BaseSystem;
#end
using $!{DataBase.Name}.$!{Setting.Data.DataName}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.EntityName}.$!{Table.CamelCaseName};
using ViteCent.Core;
#if($HasId)
using ViteCent.Core.Cache;
#end
using ViteCent.Core.Data;
using ViteCent.Core.Enums;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}仓储
/// </summary>
/// <param name="logger"></param>
#if($HasId)
/// <param name="cache"></param>
#end
/// <param name="mapper"></param>
/// <param name="mediator"></param>
/// <param name="httpContextAccessor"></param>
#if($HasId)
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}(ILogger<$!{Setting.AddName}$!{Table.CamelCaseName}> logger, IBaseCache cache, IMapper mapper, IMediator mediator, IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix}, BaseResult>
#else
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}(ILogger<$!{Setting.AddName}$!{Table.CamelCaseName}> logger, IMapper mapper, IMediator mediator, IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix}, BaseResult>
#end
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = new();

    /// <summary>
    /// 新增$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.DataArgsSuffix} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.ApplicationName}.$!{Table.CamelCaseName}.$!{Setting.AddName}$!{Table.CamelCaseName}");

        InitUser(httpContextAccessor);

        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (!string.IsNullOrWhiteSpace(companyId))
            request.CompanyId = companyId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId))
        {
            var hasCompanyArgs = new $!{Setting.GetName}BaseCompany$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                Id = request.CompanyId,
            };

            var hasCompany = await mediator.Send(hasCompanyArgs, cancellationToken);

            if (hasCompany == null)
                return new BaseResult(500, "公司不存在");

            if (hasCompany.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "公司已禁用");
        }

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(departmentId))
            request.DepartmentId = departmentId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.DepartmentId))
        {
            var hasDepartmentArgs = new $!{Setting.GetName}BaseDepartment$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.DepartmentId,
            };

            var hasDepartment = await mediator.Send(hasDepartmentArgs, cancellationToken);

            if (hasDepartment == null)
                return new BaseResult(500, "部门不存在");

            if (hasDepartment.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "部门已禁用");
        }

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(positionId))
            request.PositionId = positionId;

        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.PositionId))
        {
            var hasPositionIdArgs = new $!{Setting.GetName}BasePosition$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.PositionId,
            };

            var hasPositionId = await mediator.Send(hasPositionIdArgs, cancellationToken);

            if (hasPositionId == null)
                return new BaseResult(500, "职位不存在");

            if (hasPositionId.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "职位已禁用");
        }

#end
#if($HasUserId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.DepartmentId) && !string.IsNullOrWhiteSpace(request.UserId))
        {
            var hasUserArgs = new $!{Setting.GetName}BaseUser$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                DepartmentId = request.DepartmentId,
                Id = request.UserId,
            };

            var hasUser = await mediator.Send(hasUserArgs, cancellationToken);

            if (hasUser == null)
                return new BaseResult(500, "用户不存在");

            if (hasUser.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "用户已禁用");
        }

#end
#if($HasRoleId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.RoleId))
        {
            var hasRoleArgs = new $!{Setting.GetName}BaseRole$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.RoleId,
            };

            var hasRole = await mediator.Send(hasRoleArgs, cancellationToken);

            if (hasRole == null)
                return new BaseResult(500, "角色不存在");

            if (hasRole.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "角色已禁用");
        }

#end
#if($HasSystemId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId))
        {
            var hasSystemArgs = new $!{Setting.GetName}BaseSystem$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                Id = request.SystemId,
            };

            var hasSystem = await mediator.Send(hasSystemArgs, cancellationToken);

            if (hasSystem == null)
                return new BaseResult(500, "系统不存在");

            if (hasSystem.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "系统已禁用");
        }

#end
#if($HasResourceId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId) && !string.IsNullOrWhiteSpace(request.ResourceId))
        {
            var hasResourceArgs = new $!{Setting.GetName}BaseResource$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                SystemId = request.SystemId,
                Id = request.ResourceId,
            };

            var hasResource = await mediator.Send(hasResourceArgs, cancellationToken);

            if (hasResource == null)
                return new BaseResult(500, "资源不存在");

            if (hasResource.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "资源已禁用");
        }

#end
#if($HasOperationId)
        if (!string.IsNullOrWhiteSpace(request.CompanyId) && !string.IsNullOrWhiteSpace(request.SystemId) && !string.IsNullOrWhiteSpace(request.ResourceId) && !string.IsNullOrWhiteSpace(request.OperationId))
        {
            var hasOperationArgs = new $!{Setting.GetName}BaseOperation$!{Setting.Entity.EntityName}$!{Setting.Data.DataArgsSuffix}
            {
                CompanyId = request.CompanyId,
                SystemId = request.SystemId,
                ResourceId = request.ResourceId,
                Id = request.OperationId,
            };

            var hasOperation = await mediator.Send(hasOperationArgs, cancellationToken);

            if (hasOperation == null)
                return new BaseResult(500, "操作不存在");

            if (hasOperation.Status == (int)StatusEnum.Disable)
                return new BaseResult(500, "操作已禁用");
        }

#end
        var result = await OverrideHandle(request, cancellationToken);

        if (!result.Success)
            return result;

        var entity = mapper.Map<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.EntityName}>(request);
#if($HasId)

        entity.Id = await cache.NextIdentity(new NextIdentifyArg()
        {
            CompanyId = companyId,
            Name = "$!{Table.CamelCaseName}",
        });
#end

        entity.Creator = user?.Name ?? string.Empty;
        entity.CreateTime = DateTime.Now;
        entity.DataVersion = DateTime.Now;

        var addResult = await mediator.Send(entity, cancellationToken);

        if (!addResult.Success)
            return addResult;

        return new BaseResult(entity.Id);
    }

    /// <summary>
    /// 获取$!{Table.Description}用户信息
    /// </summary>
    /// <param name="httpContextAccessor"></param>
    private void InitUser(IHttpContextAccessor httpContextAccessor)
    {
        var context = httpContextAccessor.HttpContext;

        var json = context?.User.FindFirstValue(ClaimTypes.UserData);

        if (!string.IsNullOrWhiteSpace(json))
            user = json.DeJson<BaseUserInfo>();
    }
}