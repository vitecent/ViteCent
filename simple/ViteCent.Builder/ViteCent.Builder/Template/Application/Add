/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region

using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
#if($HasCompanyId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseCompany;
#end
#if($HasDepartmentId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseDepartment;
#end
#if($HasOperationId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseOperation;
#end
#if($HasPositionId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BasePosition;
#end
#if($HasResourceId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseResource;
#end
#if($HasRoleId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseRole;
#end
#if($HasUserId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseUser;
#end
#if($HasSystemId)
using $!{DataBase.Name}.$!{Setting.Entity.Name}.BaseSystem;
#end
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};
using $!{DataBase.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};
using ViteCent.Core;
#if($HasId)
using ViteCent.Core.Cache;
#end
using ViteCent.Core.Data;
using ViteCent.Core.Enums;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}仓储
/// </summary>
/// <param name="logger"></param>
#if($HasId)
/// <param name="cache"></param>
#end
/// <param name="mapper"></param>
/// <param name="mediator"></param>
/// <param name="httpContextAccessor"></param>
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}(ILogger<$!{Setting.AddName}$!{Table.CamelCaseName}> logger,
#if($HasId)
    IBaseCache cache,
#end
    IMapper mapper,
    IMediator mediator,
    IHttpContextAccessor httpContextAccessor) : IRequestHandler<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private BaseUserInfo user = new();

    /// <summary>
    /// 新增$!{Table.Description}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task<BaseResult> Handle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName}.$!{Setting.AddName}$!{Table.CamelCaseName}");

        user = httpContextAccessor.InitUser();

        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (!string.IsNullOrWhiteSpace(companyId))
            request.CompanyId = companyId;

        var hasCompany = await mediator.CheckCompany(request.CompanyId);

        if (hasCompany.Success)
            return hasCompany;

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(departmentId))
            request.DepartmentId = departmentId;

        var hasDepartment = await mediator.CheckDepartment(request.CompanyId, request.DepartmentId);

        if (hasDepartment.Success)
            return hasDepartment;

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(positionId))
            request.PositionId = positionId;

        var hasPosition = await mediator.CheckPosition(request.CompanyId, request.PositionId);

        if (hasPosition.Success)
            return hasPosition;

#end
#if($HasUserId)
        var hasUser = await mediator.CheckUser(request.CompanyId, request.DepartmentId, request.UserId);

        if (hasUser.Success)
            return hasUser;

#end
#if($HasRoleId)
        var hasRole = await mediator.CheckRole(request.CompanyId, request.RoleId);

        if (hasRole.Success)
            return hasRole;

#end
#if($HasSystemId)
        var hasSystem = await mediator.CheckSystem(request.CompanyId, request.SystemId);

        if (hasSystem.Success)
            return hasSystem;

#end
#if($HasResourceId)
        var hasResource = await mediator.CheckResource(request.CompanyId, request.SystemId, request.ResourceId);;

        if (hasResource.Success)
            return hasResource;

#end
#if($HasOperationId)
        var hasOperation = await mediator.CheckOperation(request.CompanyId, request.SystemId, request.ResourceId, request.OperationId);

        if (hasOperation.Success)
            return hasOperation;

#end
        var check = await OverrideHandle(request, cancellationToken);

        if (!check.Success)
            return check;

        var entity = mapper.Map<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}>(request);
#if($HasId)

        entity.Id = await cache.GetIdAsync(companyId, "$!{Table.CamelCaseName}");
#end

        entity.Creator = user?.Name ?? string.Empty;
        entity.CreateTime = DateTime.Now;
        entity.DataVersion = DateTime.Now;

#if($HasId)
        var result = await mediator.Send(entity, cancellationToken);

        if (!result.Success)
            return result;

        return new BaseResult(entity.Id);
#else
        return await await mediator.Send(entity, cancellationToken);
#end
    }
}