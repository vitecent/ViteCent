/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * **********************************
 */

#region

using MediatR;
using Microsoft.AspNetCore.Mvc;
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};
using ViteCent.Core.Data;
using ViteCent.Core.Enums;
using ViteCent.Core.Web.Api;
using ViteCent.Core.Web.Filter;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Api.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 获取$!{Table.Description}接口
/// </summary>
/// <param name="logger"></param>
/// <param name="mediator"></param>
[ApiController]
[ServiceFilter(typeof(BaseLoginFilter))]
[Route("$!{Table.CamelCaseName}")]
public class $!{Setting.GetName}$!{Table.CamelCaseName}(ILogger<$!{Setting.GetName}$!{Table.CamelCaseName}> logger,
    IMediator mediator) : BaseLoginApi<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>>
{
    /// <summary>
    /// 获取$!{Table.Description}
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    [HttpPost]
    [TypeFilter(typeof(BaseAuthFilter), Arguments = new object[] { "$!{DataBase.ServiceName}", "$!{Table.CamelCaseName}", "$!{Setting.GetName}" })]
    [Route("$!{Setting.GetName}")]
    public override async Task<DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>> InvokeAsync($!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} args)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Api.Name}.$!{Table.CamelCaseName}.$!{Setting.GetName}$!{Table.CamelCaseName}");

        if (args == null)
            return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "参数不能为空");
#if($HasCompanyId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.CompanyId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "公司标识不能为空");

        var check = User.CheckCompanyId(args.CompanyId);

        if (check != null && !check.Success)
            return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(check.Code, check.Message);
#end
#if($HasDepartmentId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.DepartmentId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "部门标识不能为空");
#end
#if($HasPositionId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.PositionId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "职位标识不能为空");
#end
#if($HasRoleId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.RoleId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "角色标识不能为空");
#end
#if($HasUserId)
 
        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.UserId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "用户标识不能为空");
#end
#if($HasSystemId)
 
        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.SystemId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "系统标识不能为空");
#end
#if($HasResourceId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.ResourceId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "资源标识不能为空");
#end
#if($HasOperationId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.OperationId))
                return new DataResult<$!{Table.CamelCaseName}$!{Setting.Data.ResultSuffix}>(500, "操作标识不能为空");
#end

        return await mediator.Send(args, new CancellationToken());
    }
}