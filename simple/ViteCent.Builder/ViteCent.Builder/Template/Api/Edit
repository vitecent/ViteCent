/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * **********************************
 */

#region

using MediatR;
using Microsoft.AspNetCore.Mvc;
using $!{DataBase.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};
using ViteCent.Core.Data;
#if($HasCompanyId||$HasDepartmentId||$HasPositionId)
using ViteCent.Core.Enums;
#end
using ViteCent.Core.Web.Api;
using ViteCent.Core.Web.Filter;

#endregion

namespace $!{DataBase.Name}.$!{Setting.Api.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 编辑$!{Table.Description}接口
/// </summary>
/// <param name="logger"></param>
/// <param name="mediator"></param>
[ApiController]
[ServiceFilter(typeof(BaseLoginFilter))]
[Route("$!{Table.CamelCaseName}")]
public class $!{Setting.EditName}$!{Table.CamelCaseName}(ILogger<$!{Setting.EditName}$!{Table.CamelCaseName}> logger,
    IMediator mediator) : BaseLoginApi<$!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 编辑$!{Table.Description}
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    [HttpPost]
    [TypeFilter(typeof(BaseAuthFilter), Arguments = new object[] { "$!{DataBase.ServiceName}", "$!{Table.CamelCaseName}", "$!{Setting.EditName}" })]
    [Route("$!{Setting.EditName}")]
    public override async Task<BaseResult> InvokeAsync($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} args)
    {
        logger.LogInformation("Invoke $!{DataBase.Name}.$!{Setting.Api.Name}.$!{Table.CamelCaseName}.$!{Setting.EditName}$!{Table.CamelCaseName}");

        var cancellationToken = new CancellationToken();
        var validator = new $!{Table.CamelCaseName}$!{Setting.Data.ValidatorSuffix}(true);

        var check = await validator.ValidateAsync(args, cancellationToken);

        if (!check.IsValid)
            return new BaseResult(500, check.Errors.FirstOrDefault()?.ErrorMessage ?? string.Empty);
#if($HasCompanyId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.CompanyId))
                return new BaseResult(500, "公司标识不能为空");

        var checkCompany = User.CheckCompanyId(args.CompanyId);

        if (checkCompany != null && !checkCompany.Success)
            return checkCompany;
#end
#if($HasDepartmentId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.DepartmentId))
                return new BaseResult(500, "部门标识不能为空");
#end
#if($HasPositionId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.PositionId))
                return new BaseResult(500, "职位标识不能为空");
#end
#if($HasRoleId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.RoleId))
                return new BaseResult(500, "角色标识不能为空");
#end
#if($HasUserId)
 
        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.UserId))
                return new BaseResult(500, "用户标识不能为空");
#end
#if($HasSystemId)
 
        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.SystemId))
                return new BaseResult(500, "系统标识不能为空");
#end
#if($HasResourceId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.ResourceId))
                return new BaseResult(500, "资源标识不能为空");
#end
#if($HasOperationId)

        if (User.IsSuper != (int)YesNoEnum.Yes)
            if (string.IsNullOrEmpty(args.OperationId))
                return new BaseResult(500, "操作标识不能为空");
#end

        return await mediator.Send(args, cancellationToken);
    }
}