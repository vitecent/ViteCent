/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region 引入命名空间

// 引入 FluentValidation 核心
using FluentValidation;

#endregion 引入命名空间

namespace $!{Setting.Database.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

/// <summary>
/// $!{Table.Description}验证器
/// </summary>
[Serializable]
public partial class $!{Table.CamelCaseName}$!{Setting.Data.ValidatorSuffix} : AbstractValidator<$!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}>
{
    /// <summary>
    /// 验证$!{Table.Description}
    /// </summary>
    /// <param name="validate">是否验证</param>
    public $!{Table.CamelCaseName}$!{Setting.Data.ValidatorSuffix}(bool validate = false)
    {
        // 验证参数不能为空
        RuleFor(x => x).NotNull().WithMessage("参数不能为空");
#foreach($Field in $ValidatorFields)
#if($Field.DataType == "string" || $Field.DataType == "string?" || $Field.DataType == "Guid" || $Field.DataType == "Guid?")

        // 验证$!{Field.Description}不能为空
        RuleFor(x => x.$!{Field.CamelCaseName}).NotNull().NotEmpty().WithMessage("$!{Field.Description}不能为空");
#elseif ($Field.DataType == "DateTime" || $Field.DataType == "DateTime?")

        // 验证$!{Field.Description}不能为空
        RuleFor(x => x.$!{Field.CamelCaseName}).Must(x => x > DateTime.MinValue && x < DateTime.MaxValue).WithMessage("$!{Field.Description}不能为空");
#else

        // 验证$!{Field.Description}不能为空
        RuleFor(x => x.$!{Field.CamelCaseName}).GreaterThan(0).WithMessage("$!{Field.Description}不能为空");
#end
#end

        // 调用扩展方法进行额外验证
        OverrideValidator(validate);
    }
}