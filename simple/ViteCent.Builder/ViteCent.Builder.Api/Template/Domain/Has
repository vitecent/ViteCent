/*
 * **********************************
 * 代码由工具自动生成
 * 重新生成时，不会覆盖原有代码
 * **********************************
 */

#region 引入命名空间

// 引入 MediatR 用于实现中介者模式
using MediatR;

// 引入 Microsoft.Extensions.Logging 用于日志记录
using Microsoft.Extensions.Logging;

// 引入$!{Table.Description}相关的数据模型
using $!{Setting.Database.CamelCaseName}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

// 引入$!{Table.Description}相关的数据参数
using $!{Setting.Database.CamelCaseName}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};

// 引入核心数据类型
using ViteCent.Core.Data;

// 引入ORM基础设施
using ViteCent.Core.Orm.SqlSugar;

#endregion 引入命名空间

namespace $!{Setting.Database.CamelCaseName}.$!{Setting.Domain.Name}.$!{Table.CamelCaseName};

/// <summary>
/// $!{Table.Description}判重处理类
/// </summary>
/// <remarks>
/// 该类用于处理单个$!{Table.Description}的判重逻辑，包括：
/// 1. 检查$!{Table.Description}编码是否重复
/// 2. 检查$!{Table.Description}名称是否重复
/// 3. 支持在更新时排除当前记录的判重
/// </remarks>
/// <param name="logger">日志记录器实例</param>
public class $!{Setting.HasName}$!{Table.CamelCaseName}(
    // 注入日志记录器
    ILogger<$!{Setting.HasName}$!{Table.CamelCaseName}> logger)
    // 继承基类，指定查询参数和返回结果类型
    : BaseDomain<$!{Table.CamelCaseName}$!{Setting.Entity.Name}>, IRequestHandler<$!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 数据库名称
    /// </summary>
    public override string Database => "$!{Setting.Database.CamelCaseName}";

    /// <summary>
    /// 处理$!{Table.Description}判重请求
    /// </summary>
    /// <param name="request">包含待检查的$!{Table.Description}标识、编码和名称的请求参数</param>
    /// <param name="cancellationToken">取消令牌</param>
    /// <returns>判重结果，包含状态码和提示信息</returns>
    /// <remarks>
    /// 该方法执行以下步骤：
    /// 1. 记录方法调用日志
    /// 2. 构建查询条件，排除当前记录并检查编码和名称是否存在重复
    /// 3. 执行查询并返回结果
    /// </remarks>
    public async Task<BaseResult> Handle($!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix} request, CancellationToken cancellationToken)
    {
        // 记录方法调用日志，便于追踪和调试
        logger.LogInformation("Invoke $!{Setting.Database.CamelCaseName}.$!{Setting.Domain.Name}.$!{Table.CamelCaseName}.$!{Setting.HasName}$!{Table.CamelCaseName}");

        // 初始化查询对象
        var query = Client.Query<$!{Table.CamelCaseName}$!{Setting.Entity.Name}>();

#if($HasId)
        // 如果有标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.Id))
            query.Where(x => x.Id != request.Id);

#end
#if($HasCompanyId)
        // 如果有公司标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.CompanyId))
            query.Where(x => x.CompanyId == request.CompanyId);

#end
#if($HasDepartmentId)
        // 如果有部门标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.DepartmentId))
            query.Where(x => x.DepartmentId == request.DepartmentId);

#end
#if($HasPositionId)
        // 如果有职位标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.PositionId))
            query.Where(x => x.PositionId == request.PositionId);

#end
#if($HasRoleId)
        // 如果有角色标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.RoleId))
            query.Where(x => x.RoleId == request.RoleId);

#end
#if($HasUserId)
        // 如果有用户标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.UserId))
            query.Where(x => x.UserId == request.UserId);

#end
#if($HasSystemId)
        // 如果有核心标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.SystemId))
            query.Where(x => x.SystemId == request.SystemId);

#end
#if($HasResourceId)
        // 如果有资源标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.ResourceId))
            query.Where(x => x.ResourceId == request.ResourceId);

#end
#if($HasOperationId)
        // 如果有操作标识参数且不为空，则添加查询条件
        if (!string.IsNullOrWhiteSpace(request.OperationId))
            query.Where(x => x.OperationId == request.OperationId);

#end
        // 执行查询，获取匹配记录数
        var entity = await query.CountAsync(cancellationToken);

        // 如果存在匹配记录，返回错误结果
        if (entity > 0)
            return new BaseResult(500, "$!{Table.Description}重复");

        // 无重复记录，返回成功结果
        return new BaseResult();
    }
}