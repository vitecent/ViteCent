/*
 * **********************************
 * 代码由工具自动生成
 * 重新生成时，不会覆盖原有代码
 * **********************************
 */

#region 引入命名空间

// 引入 MediatR 用于实现中介者模式
using MediatR;
#if($HasCompanyId)

// 引入$!{Table.Description}相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseCompany;
#end
#if($HasDepartmentId)

// 引入部门信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseDepartment;
#end
#if($HasOperationId)

// 引入操作信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseOperation;
#end
#if($HasPositionId)

// 引入职位信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BasePosition;
#end
#if($HasResourceId)

// 引入资源信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseResource;
#end
#if($HasRoleId)

// 引入角色信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseRole;
#end
#if($HasUserId)

// 引入用户信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseUser;
#end
#if($HasSystemId)

// 引入核心信息相关的模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.BaseSystem;
#end

// 引入$!{Table.Description}相关的数据参数
using $!{Setting.Database.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

// 引入$!{Table.Description}相关的数据模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};

// 引入核心
using ViteCent.Core;

// 引入核心枚举类型
using ViteCent.Core.Data;

// 引入核心枚举类型
using ViteCent.Core.Enums;

#endregion 引入命名空间

namespace $!{Setting.Database.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 新增$!{Table.Description}应用服务的扩展部分类
/// </summary>
/// <remarks>
/// 该部分类包含了新增$!{Table.Description}时的自定义验证逻辑和事件处理：
/// 1. 父级公司的验证
/// 2. 公司编码和名称的唯一性检查
/// 3. 公司层级关系的设置
/// 4. 批量新增时的验证逻辑
/// 5. 相关事件的处理
/// </remarks>
public partial class $!{Setting.AddName}$!{Table.CamelCaseName}
{
    /// <summary>
    /// 批量新增$!{Table.Description}的前置验证处理
    /// </summary>
    /// <param name="mediator">中介者，用于处理命令和查询</param>
    /// <param name="request">批量新增$!{Table.Description}的请求参数</param>
    /// <param name="user">当前操作用户信息</param>
    /// <param name="cancellationToken">取消令牌</param>
    /// <returns>返回验证结果，包含状态码和消息</returns>
    /// <remarks>
    /// 该方法执行以下验证：
    /// 1. 验证所有父级公司是否存在且状态正常
    /// 2. 检查所有公司编码和名称的唯一性
    /// </remarks>
    internal static async Task<BaseResult> OverrideHandle(IMediator mediator,
        $!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ListSuffix}$!{Setting.Data.ArgsSuffix} request,
        BaseUserInfo user,
        CancellationToken cancellationToken)
    {
#if($HasCompanyId)
        var companyId = user?.Company?.Id ?? string.Empty;
#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;
#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;
#end

        foreach (var item in request.Items)
        {
#if($HasCompanyId)
            if (string.IsNullOrWhiteSpace(item.CompanyId))
                item.CompanyId = companyId;

#end
#if($HasDepartmentId)
            if (string.IsNullOrWhiteSpace(item.DepartmentId))
                item.DepartmentId = departmentId;

#end
#if($HasPositionId)
            if (string.IsNullOrWhiteSpace(item.PositionId))
                item.PositionId = positionId;

#end
        }

#if($HasCompanyId)
        var companyIds = request.Items.Select(x => x.CompanyId).Distinct().ToList();
#end
#if($HasDepartmentId)
        var departmentIds = request.Items.Select(x => x.DepartmentId).Distinct().ToList();
#end
#if($HasPositionId)
        var positionIds = request.Items.Select(x => x.PositionId).Distinct().ToList();
#end
#if($HasRoleId)
        var roleIds = request.Items.Select(x => x.RoleId).Distinct().ToList();
#end
#if($HasUserId)
        var userIds = request.Items.Select(x => x.UserId).Distinct().ToList();
#end
#if($HasSystemId)
        var systemIds = request.Items.Select(x => x.SystemId).Distinct().ToList();
#end
#if($HasResourceId)
        var resourceIds = request.Items.Select(x => x.ResourceId).Distinct().ToList();
#end
#if($HasOperationId)
        var operationIds = request.Items.Select(x => x.OperationId).Distinct().ToList();
#end

#if($HasCompanyId)
        var companys = await mediator.CheckCompanys(companyIds);

        if (!companys.Success)
            return companys;

#end
#if($HasDepartmentId)
        var departments = await mediator.CheckDepartments(companyIds, departmentIds);

        if (!departments.Success)
            return departments;
#end
#if($HasPositionId)
        var positions = await mediator.CheckPositions(companyIds, positionIds);

        if (!positions.Success)
            return positions;
#end
#if($HasRoleId)
        var roles = await mediator.CheckRoles(companyIds, roleIds);

        if (!roles.Success)
            return roles;

#end
#if($HasUserId)
        var users = await mediator.CheckUsers(companyIds, positionIds, userIds);

        if (!users.Success)
            return users;
#end
#if($HasSystemId)
        var systems = await mediator.CheckSystems(companyIds, systemIds);

        if (!systems.Success)
            return systems;

#end
#if($HasResourceId)
        var resources = await mediator.CheckResources(companyIds, systemIds, resourceIds);

        if (!resources.Success)
            return resources;

#end
#if($HasOperationId)
        var operations = await mediator.CheckOperations(companyIds, systemIds, resourceIds, operationIds);

        if (!operations.Success)
            return operations;

#end

        var hasListArgs = new $!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ListSuffix}$!{Setting.Data.ArgsSuffix}
        {
#if($HasCompanyId)
            CompanyIds = companyIds,
#end
#if($HasDepartmentId)
            DepartmentIds = departmentIds,
#end
#if($HasPositionId)
            PositionIds = positionIds,
#end
#if($HasRoleId)
            RoleIds = roleIds,
#end
#if($HasUserId)
            UserIds = userIds,
#end
#if($HasSystemId)
            SystemIds = systemIds,
#end
#if($HasResourceId)
            ResourceIds = resourceIds,
#end
#if($HasOperationId)
            OperationIds = operationIds,
#end
        };

        return await mediator.Send(hasListArgs, cancellationToken);
    }

    /// <summary>
    /// 处理$!{Table.Description}变更的事件通知
    /// </summary>
    /// <param name="mediator">中介者，用于处理命令和查询</param>
    /// <param name="topic">事件主题，标识操作类型（新增、修改、删除等）</param>
    /// <param name="entity">公司模型信息</param>
    /// <param name="cancellationToken">取消令牌</param>
    /// <returns>任务</returns>
    /// <remarks>
    /// 该方法用于处理$!{Table.Description}变更后的事件通知
    /// 目前为预留方法，暂无具体实现
    /// </remarks>
    internal static async Task OverrideTopic(IMediator mediator,
        TopicEnum topic,
        $!{Table.CamelCaseName}$!{Setting.Entity.Name} entity,
        CancellationToken cancellationToken)
    {
        await Task.CompletedTask;
    }

    /// <summary>
    /// 新增单个$!{Table.Description}的前置验证处理
    /// </summary>
    /// <param name="request">新增$!{Table.Description}的请求参数</param>
    /// <param name="cancellationToken">取消令牌</param>
    /// <returns>返回验证结果，包含状态码和消息</returns>
    /// <remarks>
    /// 该方法执行以下验证和处理：
    /// 1. 验证父级公司是否存在且状态正常
    /// 2. 设置公司的层级关系
    /// 3. 检查公司编码和名称的唯一性
    /// </remarks>
    private async Task<BaseResult> OverrideHandle($!{Setting.AddName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request,
        CancellationToken cancellationToken)
    {
        var companyId = user?.Company?.Id ?? string.Empty;

#if($HasCompanyId)
        if (string.IsNullOrWhiteSpace(request.CompanyId))
            request.CompanyId = companyId;

        var hasCompany = await mediator.CheckCompany(request.CompanyId);

        if (hasCompany.Success)
            return hasCompany;

        request.CompanyName = hasCompany?.Data?.Name;

#end
#if($HasDepartmentId)
        var departmentId = user?.Department?.Id ?? string.Empty;

        if (string.IsNullOrWhiteSpace(request.DepartmentId))
            request.DepartmentId = departmentId;

        var hasDepartment = await mediator.CheckDepartment(request.CompanyId, request.DepartmentId);

        if (hasDepartment.Success)
            return hasDepartment;

        request.DepartmentName = hasDepartment?.Data?.Name;

#end
#if($HasPositionId)
        var positionId = user?.Position?.Id ?? string.Empty;

        if (string.IsNullOrWhiteSpace(request.PositionId))
            request.PositionId = positionId;

        var hasPosition = await mediator.CheckPosition(request.CompanyId, request.PositionId);

        if (hasPosition.Success)
            return hasPosition;

        request.PositionName = hasPosition?.Data?.Name;

#end
#if($HasUserId)
        var hasUser = await mediator.CheckUser(request.CompanyId, request.DepartmentId, request.UserId);

        if (hasUser.Success)
            return hasUser;

        request.UserName = hasUser?.Data?.RealName;

#end
#if($HasRoleId)
        var hasRole = await mediator.CheckRole(request.CompanyId, request.RoleId);

        if (hasRole.Success)
            return hasRole;

    request.RoleName = hasRole?.Data?.Name;

#end
#if($HasSystemId)
        var hasSystem = await mediator.CheckSystem(request.CompanyId, request.SystemId);

        if (hasSystem.Success)
            return hasSystem;

        request.SystemName = hasSystem?.Data?.Name;

#end
#if($HasResourceId)
        var hasResource = await mediator.CheckResource(request.CompanyId, request.SystemId, request.ResourceId);

        if (hasResource.Success)
            return hasResource;

        request.ResourceName = hasResource?.Data?.Name;

#end
#if($HasOperationId)
        var hasOperation = await mediator.CheckOperation(request.CompanyId, request.SystemId, request.ResourceId, request.OperationId);

        if (hasOperation.Success)
            return hasOperation;

        request.OperationName = hasOperation?.Data?.Name;

#end
        var hasArgs = new $!{Setting.HasName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}
        {
#if($HasCompanyId)
            CompanyId = request.CompanyId,
#end
#if($HasDepartmentId)
            DepartmentId = request.DepartmentId,
#end
#if($HasPositionId)
            PositionId = request.PositionId,
#end
#if($HasRoleId)
            RoleId = request.RoleId,
#end
#if($HasUserId)
            UserId = request.UserId,
#end
#if($HasSystemId)
            SystemId = request.SystemId,
#end
#if($HasResourceId)
            ResourceId = request.ResourceId,
#end
#if($HasOperationId)
            OperationId = request.OperationId,
#end
        };

        return await mediator.Send(hasArgs, cancellationToken);
    }
}