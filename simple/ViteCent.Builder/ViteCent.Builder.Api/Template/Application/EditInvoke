/*
 * **********************************
 * 代码由工具自动生成，请勿人工修改
 * 重新生成时，将覆盖原有代码
 * 如需扩展该类，请在partial类中实现
 * **********************************
 */

#region 引入命名空间

// 引入 AutoMapper 用于对象映射
using AutoMapper;

// 引入 MediatR 用于实现中介者模式
using MediatR;

// 引入 Asp.Net Core Mvc 核心功能
using Microsoft.AspNetCore.Http;

// 引入 Microsoft.Extensions.Logging 用于日志记录
using Microsoft.Extensions.Logging;
#if($HasCompanyId)

// 引入公司相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseCompany;
#end
#if($HasDepartmentId)

// 引入部门相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseDepartment;
#end
#if($HasOperationId)

// 引入操作相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseOperation;
#end
#if($HasPositionId)

// 引入职位相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BasePosition;
#end
#if($HasResourceId)

// 引入资源相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseResource;
#end
#if($HasRoleId)

// 引入角色相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseRole;
#end
#if($HasUserId)

// 引入用户相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseUser;
#end
#if($HasSystemId)

// 引入核心相关的数据参数
using $!{Setting.Database.InvokeProjrect}.$!{Setting.Data.Name}.BaseSystem;
#end

// 引入$!{Table.Description}相关的数据参数
using $!{Setting.Database.Name}.$!{Setting.Data.Name}.$!{Table.CamelCaseName};

// 引入$!{Table.Description}相关的数据模型
using $!{Setting.Database.Name}.$!{Setting.Entity.Name}.$!{Table.CamelCaseName};

// 引入核心数据类型
using ViteCent.Core.Data;

// 引入核心枚举类型
using ViteCent.Core.Enums;

// 引入 Web 核心
using ViteCent.Core.Web;

#endregion 引入命名空间

namespace $!{Setting.Database.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName};

/// <summary>
/// 编辑$!{Table.Description}应用
/// </summary>
/// <param name="logger">日志记录器，用于记录处理器的操作日志</param>
/// <param name="mapper">对象映射器，用于参数和模型对象之间的转换</param>
/// <param name="mediator">中介者，用于发送查询请求</param>
#if($HasCompanyId)
/// <param name="companyInvoke">公司信息访问对象</param>
#end
#if($HasDepartmentId)
/// <param name="departmentInvoke">部门信息访问对象</param>
#end
#if($HasOperationId)
/// <param name="operationInvoke">操作信息访问对象</param>
#end
#if($HasPositionId)
/// <param name="positionInvoke">职位信息访问对象</param>
#end
#if($HasResourceId)
/// <param name="resourceInvoke">资源信息访问对象</param>
#end
#if($HasRoleId)
/// <param name="roleInvoke">角色信息访问对象</param>
#end
#if($HasUserId)
/// <param name="userInvoke">用户信息访问对象</param>
#end
#if($HasSystemId)
/// <param name="systemInvoke">系统信息访问对象</param>
#end
/// <param name="httpContextAccessor">HTTP上下文访问器，用于获取当前用户信息</param>
public partial class $!{Setting.EditName}$!{Table.CamelCaseName}(
    // 注入日志记录器
    ILogger<$!{Setting.EditName}$!{Table.CamelCaseName}> logger,
    // 注入对象映射器
    IMapper mapper,
    // 注入中介者
    IMediator mediator,
#if($HasCompanyId)
    IBaseInvoke<$!{Setting.GetName}BaseCompany$!{Setting.Data.ArgsSuffix}, DataResult<BaseCompany$!{Setting.Data.ResultSuffix}>> companyInvoke,
#end
#if($HasDepartmentId)
    IBaseInvoke<$!{Setting.GetName}BaseDepartment$!{Setting.Data.ArgsSuffix}, DataResult<BaseDepartment$!{Setting.Data.ResultSuffix}>> departmentInvoke,
#end
#if($HasOperationId)
    IBaseInvoke<$!{Setting.GetName}BaseOperation$!{Setting.Data.ArgsSuffix}, DataResult<BaseOperation$!{Setting.Data.ResultSuffix}>> operationInvoke,
#end
#if($HasPositionId)
    IBaseInvoke<$!{Setting.GetName}BasePosition$!{Setting.Data.ArgsSuffix}, DataResult<BasePosition$!{Setting.Data.ResultSuffix}>> positionInvoke,
#end
#if($HasResourceId)
    IBaseInvoke<$!{Setting.GetName}BaseResource$!{Setting.Data.ArgsSuffix}, DataResult<BaseResource$!{Setting.Data.ResultSuffix}>> resourceInvoke,
#end
#if($HasRoleId)
    IBaseInvoke<$!{Setting.GetName}BaseRole$!{Setting.Data.ArgsSuffix}, DataResult<BaseRole$!{Setting.Data.ResultSuffix}>> roleInvoke,
#end
#if($HasUserId)
    IBaseInvoke<$!{Setting.GetName}BaseUser$!{Setting.Data.ArgsSuffix}, DataResult<BaseUser$!{Setting.Data.ResultSuffix}>> userInvoke,
#end
#if($HasSystemId)
    IBaseInvoke<$!{Setting.GetName}BaseSystem$!{Setting.Data.ArgsSuffix}, DataResult<BaseSystem$!{Setting.Data.ResultSuffix}>> systemInvoke,
#end
    // 注入HTTP上下文访问器
    IHttpContextAccessor httpContextAccessor)
    // 继承基类，指定查询参数和返回结果类型
    : IRequestHandler<$!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix}, BaseResult>
{
    /// <summary>
    /// 用户信息
    /// </summary>
    private readonly BaseUserInfo user = httpContextAccessor.InitUser(); 

    /// <summary>
    /// 编辑$!{Table.Description}
    /// </summary>
    /// <param name="request">请求参数</param>
    /// <param name="cancellationToken">取消令牌</param>
    /// <returns>处理结果</returns>
    public async Task<BaseResult> Handle($!{Setting.EditName}$!{Table.CamelCaseName}$!{Setting.Data.ArgsSuffix} request,
        CancellationToken cancellationToken)
    {
        // 记录方法调用日志，便于追踪和调试
        logger.LogInformation("Invoke $!{Setting.Database.Name}.$!{Setting.Application.Name}.$!{Table.CamelCaseName}.$!{Setting.EditName}$!{Table.CamelCaseName}");

        var check = await OverrideHandle(request, cancellationToken);

        if (!check.Success)
            return check;

        var args = mapper.Map<$!{Setting.GetName}$!{Table.CamelCaseName}$!{Setting.Entity.Name}$!{Setting.Data.ArgsSuffix}>(request);

        var entity = await mediator.Send(args, cancellationToken);

        if (entity is null)
            return new BaseResult(500, "$!{Table.Description}不存在");

        check = await OverrideHandle(entity, cancellationToken);

        if (!check.Success)
            return check;

#foreach($Field in $EditFields)
#if($Field.Nullable)
#if($Field.DataType == "string?")
        if (request.$!{Field.CamelCaseName} is not null)
            entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName};
#else
        if (request.$!{Field.CamelCaseName}.HasValue)
            entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName}.Value;
#end
#else
        entity.$!{Field.CamelCaseName} = request.$!{Field.CamelCaseName};
#end

#end
        entity.Updater = user?.Name ?? string.Empty;
        entity.UpdateTime = DateTime.Now;
        entity.Version = DateTime.Now;

        var result = await mediator.Send(entity, cancellationToken);

        await $!{Setting.AddName}$!{Table.CamelCaseName}.OverrideTopic(mediator, TopicEnum.Edit, entity, cancellationToken);

        return result;
    }
}